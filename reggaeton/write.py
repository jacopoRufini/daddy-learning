import argparse
import dill

import numpy as np
from tensorflow.keras.models import load_model
from keras_preprocessing.sequence import pad_sequences
from constants import WINDOW_SIZE
from preprocessor import Preprocessor


def sample(preds, temperature=1.0):
    preds = np.asarray(preds).astype('float64')
    preds = np.log(preds) / temperature
    exp_preds = np.exp(preds)
    preds = exp_preds / np.sum(exp_preds)
    probas = np.random.multinomial(1, preds, 1)
    return np.argmax(probas)


def guess(text, model, max_sequence_len, tokenizer, n_of_verses, diversity):
    text = text.lower()
    verses = 0
    while True:
        token_list = tokenizer.texts_to_sequences([text])[0]
        token_list = pad_sequences([token_list], maxlen=max_sequence_len, padding='pre')
        predicted = model.predict(token_list, verbose=0)[0]
        next_index = sample(predicted, diversity)
        word = tokenizer.index_word[next_index]
        if word == '\n':
            verses += 1
            if verses == n_of_verses:
                break
        text += " " + word
    return text


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="print out some lyrics generated by the trained model"
    )

    parser.add_argument("-s", "--seed", help="the text used to generate lyrics", required=True)
    parser.add_argument("-p", "--preprocessor_path",
                        help="serialized preprocessor object",
                        type=str,
                        default='../data/preprocessing/preprocessor.dump')
    parser.add_argument("-m", "--model_path",
                        help="path of the model",
                        type=str,
                        default='../data/training/cp.ckpt')
    parser.add_argument("-d", "--diversity", help="diversity value. default: 0.5", type=float, default=0.5)
    parser.add_argument("-q", "--quantity", help="number of verses to generate. default: 4", type=int, default=4)
    args = parser.parse_args()

    seed = args.seed
    preprocessor_path = args.preprocessor_path
    model_path = args.model_path
    diversity = args.diversity
    quantity = args.quantity

    with open(preprocessor_path, 'rb') as file:
        tokenizer = dill.load(file).tokenizer

    model = load_model(model_path)
    print(guess(seed, model, WINDOW_SIZE, tokenizer, quantity, diversity))
